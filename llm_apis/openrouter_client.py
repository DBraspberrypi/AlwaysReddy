import requests
import os
import json
import base64
import httpx

class OpenRouterClient:
    """Client for interacting with the OpenRouter API."""

    def __init__(self, verbose=False):
        """Initialize the OpenRouter client with the API key."""
        self.api_key = os.getenv('OPENROUTER_API_KEY')
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.verbose = verbose

    def stream_completion(self, messages, model, **kwargs):
        """Stream completion from the OpenRouter API.
        
        Args:
            messages (list): List of messages.
            model (str): Model for completion.
            **kwargs: Additional keyword arguments.

        Yields:
            str: Text generated by the OpenRouter API.
        """
        # Process messages to handle multimodal content
        processed_messages = []
        for message in messages:
            content = []
            
            # Handle text content
            if isinstance(message.get('content'), str):
                content.append({"type": "text", "text": message['content']})
            elif isinstance(message.get('content'), list):
                for item in message['content']:
                    if item.get('type') == 'image':
                        content.append({
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:{item['source']['media_type']};base64,{item['source']['data']}"
                            }
                        })
                    else:
                        content.append(item)
            
            processed_messages.append({
                "role": message['role'],
                "content": content if content else message.get('content')
            })

        payload = {
            "model": model,
            "messages": processed_messages,
            **kwargs
        }
        headers = {
            "accept": "application/json",
            "content-type": "application/json",
            "Authorization": f"Bearer {self.api_key}",
            "HTTP-Referer": "https://your-site-url.com",  # Optional, for including your app on openrouter.ai rankings.
            "X-Title": "Your App Name",  # Optional. Shows in rankings on openrouter.ai.
        }

        try:
            response = requests.post(self.base_url, json=payload, headers=headers, stream=False)
            response.raise_for_status()
            data = response.json()
            message_content = data['choices'][0]['message']['content']
            yield message_content
        except Exception as e:
            if self.verbose:
                import traceback
                traceback.print_exc()
            else:
                print(f"An error occurred streaming completion from OpenRouter API: {e}")
            raise RuntimeError(f"An error occurred streaming completion from OpenRouter API: {e}")

# Test the OpenRouterClient
if __name__ == "__main__":
    client = OpenRouterClient(verbose=True)
    
    #test text only   
    messages = [
        {
            "role": "system",
            "content": "Be precise and concise."
        },
        {
            "role": "user",
            "content": "What is the capital of France?"
        }
    ]
    model = "meta-llama/llama-3.2-11b-vision-instruct:free"  # or another vision-capable model

    print("\nText-only Response:")
    for chunk in client.stream_completion(messages, model):
        print(chunk, end='', flush=True)
    print()  # Add a newline at the end

    
    #test multimodal
    image_url = "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
    image_data = base64.b64encode(httpx.get(image_url).content).decode("utf-8")
 
    messages = [
        {
            "role": "system",
            "content": "Respond only in rhyming couplets."
        },
        {
            "role": "user",
            "content": [
                {"type": "text", "text": "Should I eat this?"},
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{image_data}"
                    }
                }
            ]
        }
    ]
   
    print("\nMultimodal Response:")
    for chunk in client.stream_completion(messages, model):
        print(chunk, end='', flush=True)
    print()
