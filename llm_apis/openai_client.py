from openai import OpenAI
import os

class OpenAIClient:
    """Client for interacting with OpenAI API."""
    def __init__(self, verbose=False):
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        self.verbose = verbose

    def stream_completion(self, messages, model, **kwargs):
        """Get completion from OpenAI API.

        Args:
            messages (list): List of messages.
            model (str): Model for completion.
            **kwargs: Additional keyword arguments.

        Yields:
            str: Text generated by the OpenAI API.
        """
        try:
            stream = self.client.chat.completions.create(
                model=model,
                messages=messages,
                stream=True,
                **kwargs
            )
            for chunk in stream:
                content = chunk.choices[0].delta.content
                if content is not None:
                    yield content
        except Exception as e:
            if self.verbose:
                import traceback
                traceback.print_exc()
            else:
                print(f"An error occurred streaming completion from OpenAI: {e}")
            raise RuntimeError(f"An error occurred streaming completion from OpenAI: {e}")