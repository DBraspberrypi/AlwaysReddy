from anthropic import Anthropic
import anthropic.types
import os
import base64
import httpx

class AnthropicClient:
    def __init__(self, verbose=False):
        """Initialize the Anthropic client with the API key."""
        self.client = Anthropic(api_key=os.getenv('ANTHROPIC_API_KEY'))
        self.verbose = verbose

    def stream_completion(self, messages, model, **kwargs):
        """Stream completion from the Anthropic API.

        Args:
            messages (list): List of messages.
            model (str): Model for completion.
            **kwargs: Additional keyword arguments, including max_tokens if specified.

        Yields:
            str: Text generated by the Anthropic API.
        """
        # Extract system message if present, otherwise set to None
        system_messages = [message['content'] for message in messages if message['role'] == 'system']
        system_message = system_messages[0] if system_messages else None
        
        # Filter out system messages from the messages list
        messages = [message for message in messages if message['role'] != 'system']

        try:
            # Prepare the arguments for the Anthropic API call
            api_args = {
                "model": model,
                "max_tokens": kwargs.get('max_tokens', 1000),  # Default to 1000 if not provided
                **kwargs
            }
            
            # Only include the system parameter if a system message is present
            if system_message:
                api_args["system"] = system_message

            processed_messages = []
            for message in messages:
                if 'image' in message:
                    processed_content = [
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": "image/jpeg",
                                "data": message['image'].replace('\n', '')  # Remove newlines
                            }
                        }
                    ]
                    
                    # Add original text content if present
                    if 'content' in message and message['content']:
                        processed_content.append({
                            "type": "text",
                            "text": message['content']
                        })
                
                    processed_messages.append({
                        "role": message['role'],
                        "content": processed_content
                    })
                else:
                    processed_messages.append({
                        "role": message['role'],
                        "content": message['content']
                    })

            if not processed_messages:
                raise ValueError(f"No messages to send to the API. Original messages: {messages}")

            api_args["messages"] = processed_messages

            with self.client.messages.stream(**api_args) as stream:
                for event in stream:
                    if isinstance(event, anthropic.types.MessageStartEvent):
                        continue
                    if isinstance(event, anthropic.types.ContentBlockStartEvent):
                        continue
                    if isinstance(event, anthropic.types.ContentBlockDeltaEvent):
                        yield event.delta.text
        except Exception as e:
            if self.verbose:
                import traceback
                traceback.print_exc()
            print(f"An error occurred streaming completion from Anthropic API: {e}")
            raise RuntimeError(f"An error occurred streaming completion from Anthropic API: {e}")
        
        
# Test the AnthropicClient
if __name__ == "__main__":
    client = AnthropicClient(verbose=True)
    
#test text only   
    messages = [
        {
            "role": "system",
            "content": "Be precise and concise."
        },
        {
            "role": "user",
            "content": "What is the capital of France?"
        }
    ]
    model = "claude-3-5-sonnet-20240620"

    print("Response:")
    for chunk in client.stream_completion(messages, model):
        print(chunk, end='', flush=True)
    print()  # Add a newline at the end

    
#test multimodal
    image_url = "https://upload.wikimedia.org/wikipedia/commons/a/a7/Camponotus_flavomarginatus_ant.jpg"
    image_media_type = "image/jpeg"
    image_data = base64.b64encode(httpx.get(image_url).content).decode("utf-8")
 
    messages=[
        {
            "role": "system",
            "content": "Respond only in rhyming couplets."
        },
        {
            "role": "user",
            "content": "Should I eat this?"
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "image",
                    "source": {
                        "type": "base64",
                        "media_type": image_media_type,
                        "data": image_data,
                    },
                }
            ],
        }
    ]
   
    print("Response:")
    for chunk in client.stream_completion(messages, model):
        print(chunk, end='', flush=True)
    print()  

